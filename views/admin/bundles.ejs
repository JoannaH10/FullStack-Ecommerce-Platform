<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bundles Admin Panel</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/admin-assets/css/bundles.css">
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-boxes"></i> Bundles Admin Panel</h1>
            <nav class="admin-nav">
                <button id="view-all-bundles-btn">
                    <i class="fas fa-list"></i> View All Bundles
                </button>
                <button id="add-bundle-btn">
                    <i class="fas fa-plus-circle"></i> Add New Bundle
                </button>
            </nav>
        </header>
        
        <div class="spinner" id="loading-spinner"></div>

        <!-- Bundle Table Section -->
        <section id="bundle-table-section" class="admin-section active">
            <h2 class="section-title">
                <i class="fas fa-gift"></i> Current Bundles
                <span class="product-count" id="bundle-count">0 bundles</span>
            </h2>
            
            <div class="search-container">
                <input type="text" id="bundle-search" placeholder="Search bundles...">
                <button id="search-button">
                    <i class="fas fa-search"></i> Search
                </button>
            </div>
            
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Image</th>
                            <th>Title</th>
                            <th>Category</th>
                            <th>Products</th>
                            <th>Price</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <% var safeBundles = (typeof bundles !== 'undefined' && Array.isArray(bundles)) ? bundles : []; %>
                    <tbody id="bundles-table-body">
                        <% if (safeBundles.length > 0) { %>
                            <% safeBundles.forEach(function(bundle) { %>
                                <tr data-id="<%= bundle._id %>">
                                    <td><%= bundle._id.toString().slice(-6) %></td>
                                    <td>
                                        <img src="<%= bundle.image || '/images/placeholder.png' %>" 
                                             alt="<%= bundle.title %>" 
                                             class="bundle-image"
                                             onerror="this.onerror=null;this.src='/images/placeholder.png'">
                                    </td>
                                    <td><%= bundle.title %></td>
                                    <td><%= bundle.category %></td>
                                    <td><span class="product-count"><%= bundle.productCount %></span></td>
                                    <td><%= bundle.price.toFixed(2) %> EGP</td>
                                    <td><%= bundle.description ? bundle.description.substring(0, 50) + '...' : 'No description' %></td>
                                    <td class="action-buttons">
                                        <button class="btn-edit" data-id="<%= bundle._id %>">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <button class="btn-delete" data-id="<%= bundle._id %>">
                                            <i class="fas fa-trash-alt"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr><td colspan="8">No bundles found</td></tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </section>

        <!-- Bundle Form Section -->
        <section id="bundle-form-section" class="admin-section">
            <h2 class="section-title">
                <i class="fas fa-plus-circle"></i> <span id="form-title">Add New Bundle</span>
            </h2>
            
            <div class="form-container">
                <div id="bundle-form-message" class="message" style="display:none;"></div>
                
                <form id="bundle-form" class="form-grid">
                    <input type="hidden" id="bundle-id">
                    
                    <div class="form-group">
                        <label for="bundle-title"><i class="fas fa-tag"></i> Bundle Title</label>
                        <input type="text" id="bundle-title" placeholder="Enter bundle title" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="bundle-category"><i class="fas fa-folder"></i> Category</label>
                        <select id="bundle-category" required>
                            <option value="">Select Category</option>
                            <option value="Regional">Regional Bundles</option>
                            <option value="Theme-Based">Theme-Based Bundles</option>
                            <option value="Occasion">Occasion Bundles</option>
                            <option value="Exclusive">Exclusive</option>
                        </select>
                    </div>
                    
                    <div class="form-group full-width">
                        <label for="bundle-products"><i class="fas fa-box-open"></i> Products</label>
                        <div class="selected-count-container">
                            <small id="selected-count">0 products selected</small>
                        </div>
                        
                        <!-- Category Tabs -->
                        <ul class="category-tabs">
                            <li><a href="#" data-filter="chips&crisps" class="active">CHIPS & CRISPS</a></li>
                            <li><a href="#" data-filter="soda">SODA</a></li>
                            <li><a href="#" data-filter="chocolates">CHOCOLATES</a></li>
                            <li><a href="#" data-filter="sweets">SWEETS</a></li>
                            <li><a href="#" data-filter="all">ALL PRODUCTS</a></li>
                        </ul>
                        
                        <!-- Products Grid -->
                        <div class="products-grid" id="products-grid">
                            <!-- Products will be loaded dynamically -->
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="bundle-price"><i class="fas fa-tag"></i> Price (EGP)</label>
                        <input type="number" id="bundle-price" step="0.01" min="0" placeholder="Enter bundle price" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="bundle-image"><i class="fas fa-image"></i> Image URL</label>
                        <input type="text" id="bundle-image" placeholder="Provide a direct URL to the bundle image">
                    </div>
                    
                    <div class="form-group full-width">
                        <label for="bundle-description"><i class="fas fa-align-left"></i> Description</label>
                        <textarea id="bundle-description" placeholder="Enter bundle description"></textarea>
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="btn-save">
                            <i class="fas fa-save"></i> Save Bundle
                        </button>
                        <button type="button" id="cancel-form-btn" class="btn-cancel">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                    </div>
                </form>
                
                <!-- Bundle Preview -->
                <div class="preview-container">
                    <div class="preview-header">
                        <i class="fas fa-eye"></i>
                        <h3>Bundle Preview</h3>
                    </div>
                    <div class="preview-card">
                        <img src="https://via.placeholder.com/150" 
                             alt="Bundle Preview" 
                             class="preview-image"
                             id="preview-image">
                        <div class="preview-content">
                            <div class="preview-title" id="preview-title">Bundle Title</div>
                            <div class="preview-price" id="preview-price">0.00 EGP</div>
                            <div class="preview-description" id="preview-description">Bundle description will appear here...</div>
                            <div class="preview-products" id="preview-products">
                                <span class="product-badge">No products selected</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            // DOM Elements
            const viewAllBtn = document.getElementById('view-all-bundles-btn');
            const addBundleBtn = document.getElementById('add-bundle-btn');
            const tableSection = document.getElementById('bundle-table-section');
            const formSection = document.getElementById('bundle-form-section');
            const bundleForm = document.getElementById('bundle-form');
            const cancelBtn = document.getElementById('cancel-form-btn');
            const formTitle = document.getElementById('form-title');
            const bundleIdInput = document.getElementById('bundle-id');
            const messageDiv = document.getElementById('bundle-form-message');
            const selectedCount = document.getElementById('selected-count');
            const loadingSpinner = document.getElementById('loading-spinner');
            const bundlesTableBody = document.getElementById('bundles-table-body');
            const productsGrid = document.getElementById('products-grid');
            const bundleCount = document.getElementById('bundle-count');
            
            // Preview elements
            const previewTitle = document.getElementById('preview-title');
            const previewPrice = document.getElementById('preview-price');
            const previewDescription = document.getElementById('preview-description');
            const previewProducts = document.getElementById('preview-products');
            const previewImage = document.getElementById('preview-image');
            const bundleImageInput = document.getElementById('bundle-image');
            
            // Selected products array
            let selectedProducts = [];
            let allProducts = [];
            let allBundles = [];

            // Show loading spinner
            function showLoading() {
                loadingSpinner.style.display = 'block';
            }
            
            // Hide loading spinner
            function hideLoading() {
                loadingSpinner.style.display = 'none';
            }
            
            // Fetch all bundles from the database
            async function fetchBundles() {
                showLoading();
                try {
                    const response = await fetch('/admin/bundles/data');
                    const bundles = await response.json();
                    allBundles = bundles;
                    renderBundlesTable(bundles);
                    bundleCount.textContent = `${bundles.length} bundles`;
                    hideLoading();
                } catch (err) {
                    console.error('Error fetching bundles:', err);
                    hideLoading();
                }
            }
            
            // Fetch all products from the database
            async function fetchProducts() {
                showLoading();
                try {
                    const response = await fetch('/admin/products/data');
                    const products = await response.json();
                    allProducts = products;
                    renderProductsGrid(products);
                    hideLoading();
                } catch (err) {
                    console.error('Error fetching products:', err);
                    hideLoading();
                }
            }
            
            // Render bundles in the table
            function renderBundlesTable(bundles) {
                bundlesTableBody.innerHTML = '';
                
                bundles.forEach(bundle => {
                    const row = document.createElement('tr');
                    
                    // Handle ID display - use MongoDB _id if id field doesn't exist
                    const displayId = bundle.id ? bundle.id.slice(-6) : bundle._id.toString().slice(-6);
                    
                    row.innerHTML = `
                        <td>${displayId}</td>
                        <td>
                            <img src="${bundle.image || 'https://via.placeholder.com/60'}" 
                                 alt="${bundle.title}" 
                                 class="bundle-image"
                                 onerror="this.onerror=null;this.src='https://via.placeholder.com/60';">
                        </td>
                        <td>${bundle.title}</td>
                        <td>${bundle.category || 'Uncategorized'}</td>
                        <td>
                            <span class="product-count">
                                ${bundle.products ? bundle.products.length : 0} products
                            </span>
                        </td>
                        <td>${bundle.price ? bundle.price.toFixed(2) : '0.00'} EGP</td>
                        <td>${bundle.description ? bundle.description.substring(0, 50) + (bundle.description.length > 50 ? '...' : '') : 'N/A'}</td>
                        <td class="action-buttons">
                            <button class="btn-edit" data-id="${bundle._id}">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn-delete" data-id="${bundle._id}">
                                <i class="fas fa-trash-alt"></i> Delete
                            </button>
                        </td>
                    `;
                    
                    bundlesTableBody.appendChild(row);
                });
                
                attachEditEventListeners();
                attachDeleteEventListeners();
            }
            
            // Render products in the grid
            function renderProductsGrid(products) {
                productsGrid.innerHTML = '';
                
                products.forEach(product => {
                    const productCard = document.createElement('div');
                    productCard.className = 'product-card';
                    productCard.dataset.id = product._id;
                    productCard.dataset.category = product.category ? product.category.toLowerCase().replace(/ /g, '') : 'other';
                    
                    productCard.innerHTML = `
                        <img src="${product.image || 'https://via.placeholder.com/60'}" 
                             alt="${product.name}" 
                             onerror="this.onerror=null;this.src='https://via.placeholder.com/60';">
                        <h4>${product.name}</h4>
                        <p>${product.brand || 'No brand'}</p>
                        <div class="price">${product.price ? product.price.toFixed(2) : '0.00'} EGP</div>
                    `;
                    
                    productsGrid.appendChild(productCard);
                });
                
                // Reattach product selection event listeners
                attachProductSelectionListeners();
            }
            
            // Initialize product selection
            function attachProductSelectionListeners() {
                document.querySelectorAll('.product-card').forEach(card => {
                    card.addEventListener('click', () => {
                        const productId = card.dataset.id;
                        const index = selectedProducts.indexOf(productId);
                        
                        if (index > -1) {
                            // Deselect if already selected
                            selectedProducts.splice(index, 1);
                            card.classList.remove('selected');
                        } else {
                            // Select if not selected
                            selectedProducts.push(productId);
                            card.classList.add('selected');
                        }
                        
                        // Update selected count
                        selectedCount.textContent = `${selectedProducts.length} products selected`;
                        updatePreview();
                    });
                });
            }
            
            // Attach edit event listeners
            function attachEditEventListeners() {
                document.querySelectorAll('.btn-edit').forEach(btn => {
                    btn.addEventListener('click', async (e) => {
                        const bundleId = e.target.closest('.btn-edit').dataset.id;
                        await loadBundleForEditing(bundleId);
                    });
                });
            }
            
            // Attach delete event listeners
            function attachDeleteEventListeners() {
                document.querySelectorAll('.btn-delete').forEach(btn => {
                    btn.addEventListener('click', async (e) => {
                        const bundleId = e.target.closest('.btn-delete').dataset.id;
                        await deleteBundle(bundleId, e.target);
                    });
                });
            }
            
            // Load bundle for editing
            async function loadBundleForEditing(bundleId) {
                showLoading();
                try {
                    const response = await fetch(`/admin/bundles/${bundleId}`);
                    const bundle = await response.json();
                    
                    // Populate form
                    bundleIdInput.value = bundle._id;
                    document.getElementById('bundle-title').value = bundle.title || '';
                    document.getElementById('bundle-category').value = bundle.category || '';
                    document.getElementById('bundle-price').value = bundle.price || '';
                    document.getElementById('bundle-description').value = bundle.description || '';
                    document.getElementById('bundle-image').value = bundle.image || '';
                    
                    // Select products
                    selectedProducts = bundle.products || [];
                    document.querySelectorAll('.product-card').forEach(card => {
                        if (selectedProducts.includes(card.dataset.id)) {
                            card.classList.add('selected');
                        } else {
                            card.classList.remove('selected');
                        }
                    });
                    selectedCount.textContent = `${selectedProducts.length} products selected`;
                    
                    formTitle.textContent = 'Edit Bundle';
                    tableSection.classList.remove('active');
                    formSection.classList.add('active');
                    updatePreview();
                    hideLoading();
                } catch (err) {
                    showMessage('Error loading bundle data', 'error');
                    hideLoading();
                }
            }
            
            // Delete bundle
            async function deleteBundle(bundleId, button) {
                if (confirm('Are you sure you want to delete this bundle?')) {
                    showLoading();
                    try {
                        const response = await fetch(`/admin/bundles/${bundleId}`, {
                            method: 'DELETE'
                        });
                        
                        if (response.ok) {
                            button.closest('tr').remove();
                            showMessageInTable('Bundle deleted successfully', 'success');
                            
                            // Refresh bundle count
                            const bundles = await fetchBundles();
                            bundleCount.textContent = `${bundles.length} bundles`;
                        } else {
                            showMessageInTable('Error deleting bundle', 'error');
                        }
                        hideLoading();
                    } catch (err) {
                        showMessageInTable('Error deleting bundle', 'error');
                        hideLoading();
                    }
                }
            }
            
            // Category tabs functionality
            document.querySelectorAll('.category-tabs a').forEach(tab => {
                tab.addEventListener('click', (e) => {
                    e.preventDefault();
                    
                    // Update active tab
                    document.querySelectorAll('.category-tabs a').forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');
                    
                    const filter = tab.dataset.filter;
                    
                    // Filter products
                    document.querySelectorAll('.product-card').forEach(card => {
                        if (filter === 'all' || card.dataset.category === filter) {
                            card.style.display = 'block';
                        } else {
                            card.style.display = 'none';
                        }
                    });
                });
            });
            
            // Update preview when inputs change
            document.getElementById('bundle-title').addEventListener('input', updatePreview);
            document.getElementById('bundle-price').addEventListener('input', updatePreview);
            document.getElementById('bundle-description').addEventListener('input', updatePreview);
            bundleImageInput.addEventListener('input', updatePreview);
            
            // Function to update preview
            function updatePreview() {
                const title = document.getElementById('bundle-title').value || 'Bundle Title';
                const price = document.getElementById('bundle-price').value || '0.00';
                const description = document.getElementById('bundle-description').value || 'Bundle description will appear here...';
                const imageUrl = bundleImageInput.value;
                
                previewTitle.textContent = title;
                previewPrice.textContent = `${parseFloat(price).toFixed(2)} EGP`;
                previewDescription.textContent = description;
                
                if (imageUrl) {
                    previewImage.src = imageUrl;
                } else {
                    previewImage.src = 'https://via.placeholder.com/150';
                }
                
                // Update products preview
                previewProducts.innerHTML = '';
                
                if (selectedProducts.length === 0) {
                    previewProducts.innerHTML = '<span class="product-badge">No products selected</span>';
                } else {
                    // Get selected product names
                    const selectedProductNames = [];
                    document.querySelectorAll('.product-card.selected').forEach(card => {
                        selectedProductNames.push(card.querySelector('h4').textContent);
                    });
                    
                    // Create badges for preview
                    selectedProductNames.forEach(name => {
                        const badge = document.createElement('span');
                        badge.className = 'product-badge';
                        badge.textContent = name;
                        previewProducts.appendChild(badge);
                    });
                }
            }
            
            // Toggle between table and form views
            viewAllBtn.addEventListener('click', () => {
                tableSection.classList.add('active');
                formSection.classList.remove('active');
            });
            
            addBundleBtn.addEventListener('click', () => {
                bundleForm.reset();
                bundleIdInput.value = '';
                formTitle.textContent = 'Add New Bundle';
                selectedProducts = [];
                document.querySelectorAll('.product-card').forEach(card => {
                    card.classList.remove('selected');
                });
                selectedCount.textContent = '0 products selected';
                tableSection.classList.remove('active');
                formSection.classList.add('active');
                updatePreview();
            });
            
            cancelBtn.addEventListener('click', () => {
                tableSection.classList.add('active');
                formSection.classList.remove('active');
            });
            
            // Form submission handler
            bundleForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const bundleId = bundleIdInput.value;
                const formData = {
                    title: document.getElementById('bundle-title').value,
                    category: document.getElementById('bundle-category').value,
                    products: selectedProducts,
                    price: parseFloat(document.getElementById('bundle-price').value),
                    description: document.getElementById('bundle-description').value,
                    image: document.getElementById('bundle-image').value
                };
                
                // Simple validation
                if (!formData.title || !formData.category || selectedProducts.length === 0) {
                    showMessage('Please fill in all required fields', 'error');
                    return;
                }
                
                showLoading();
                try {
                    const url = bundleId ? `/admin/bundles/${bundleId}` : '/admin/bundles';
                    const method = bundleId ? 'PUT' : 'POST';
                    
                    const response = await fetch(url, {
                        method,
                        headers: { 
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        showMessage(
                            bundleId ? 'Bundle updated successfully!' : 'Bundle created successfully!', 
                            'success'
                        );
                        
                        // Refresh data
                        await fetchBundles();
                        
                        // Reset and go back to table
                        setTimeout(() => {
                            bundleForm.reset();
                            selectedProducts = [];
                            document.querySelectorAll('.product-card').forEach(card => {
                                card.classList.remove('selected');
                            });
                            selectedCount.textContent = '0 products selected';
                            tableSection.classList.add('active');
                            formSection.classList.remove('active');
                            hideLoading();
                        }, 1500);
                    } else {
                        const error = await response.json();
                        showMessage(error.message || 'Operation failed', 'error');
                        hideLoading();
                    }
                } catch (err) {
                    showMessage('An error occurred: ' + err.message, 'error');
                    hideLoading();
                }
            });
            
            // Search functionality
            document.getElementById('search-button').addEventListener('click', () => {
                const searchTerm = document.getElementById('bundle-search').value.toLowerCase();
                const rows = document.querySelectorAll('#bundles-table-body tr');
                
                rows.forEach(row => {
                    const title = row.cells[2].textContent.toLowerCase();
                    const category = row.cells[3].textContent.toLowerCase();
                    const description = row.cells[5].textContent.toLowerCase();
                    
                    if (title.includes(searchTerm) || category.includes(searchTerm) || description.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
            
            // Helper functions
            function showMessage(text, type) {
                messageDiv.textContent = text;
                messageDiv.className = `message ${type}`;
                messageDiv.style.display = 'block';
                setTimeout(() => messageDiv.style.display = 'none', 3000);
            }
            
            function showMessageInTable(text, type) {
                alert(`${type === 'success' ? '✅ ' : '❌ '} ${text}`);
            }
            
            // Initialize preview
            updatePreview();
            
            // Fetch initial data
            await fetchBundles();
            await fetchProducts();
        });
    </script>
    <!-- Add this at the bottom of your bundles.ejs file -->
<script src="/js/admin/bundlesAdmin.js"></script>
</body>
</html>

<script>
    // Update toggleProductSelection
    function toggleProductSelection(e) {
        const card = e.currentTarget;
        const productId = card.dataset.id;
        
        if (card.classList.contains('selected')) {
            selectedProducts = selectedProducts.filter(id => id !== productId);
            card.classList.remove('selected');
        } else {
            selectedProducts.push(productId);
            card.classList.add('selected');
        }
        
        selectedCount.textContent = `${selectedProducts.length} products selected`;
    }

    // Update category filtering
    if (document.querySelectorAll('.category-tabs a').length) {
        document.querySelectorAll('.category-tabs a').forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();
                document.querySelectorAll('.category-tabs a').forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                const filter = tab.dataset.filter;
                document.querySelectorAll('.product-card').forEach(card => {
                    card.style.display = (filter === 'all' || card.dataset.category === filter) 
                        ? 'block' 
                        : 'none';
                });
            });
        });
    }
</script>